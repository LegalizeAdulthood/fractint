diff -c ../d_disk.c ./d_disk.c
*** ../d_disk.c	2003-02-09 13:57:05.000000000 -0600
--- ./d_disk.c	2003-02-09 13:57:00.000000000 -0600
***************
*** 1384,1390 ****
    fprintf(stderr, "disk_buzzer(%d)\n", kind);
  }
  
! static void
  disk_sound_on(Driver *drv, int freq)
  {
    fprintf(stderr, "disk_sound_on(%d)\n", freq);
--- 1384,1390 ----
    fprintf(stderr, "disk_buzzer(%d)\n", kind);
  }
  
! static int
  disk_sound_on(Driver *drv, int freq)
  {
    fprintf(stderr, "disk_sound_on(%d)\n", freq);
diff -c ../d_x11.c ./d_x11.c
*** ../d_x11.c	2003-02-09 13:57:05.000000000 -0600
--- ./d_x11.c	2003-02-09 13:57:00.000000000 -0600
***************
*** 19,24 ****
--- 19,25 ----
  #include <X11/Xlib.h>
  #include <X11/keysym.h>
  #include <X11/Xatom.h>
+ #include <X11/Xutil.h>
  #include <signal.h>
  #include <sys/types.h>
  #include <sys/wait.h>
***************
*** 135,142 ****
  
    int xbufkey; /* = 0; */		/* Buffered X key */
    
-   unsigned char *fontPtr;		/* = NULL; */
- 
    char text_screen[TEXT_HEIGHT][TEXT_WIDTH];
    int text_attr[TEXT_HEIGHT][TEXT_WIDTH];
  
--- 136,141 ----
***************
*** 369,375 ****
  test_video_mode(Driver *drv, VIDEOINFO *mode)
  {
    int result = 1;
!   DIX11(drv);
  
  /* FIXME need to work out how to test JCO */
  /* see d_allegro.c */
--- 368,374 ----
  test_video_mode(Driver *drv, VIDEOINFO *mode)
  {
    int result = 1;
! /*  DIX11(drv); */
  
  /* FIXME need to work out how to test JCO */
  /* see d_allegro.c */
***************
*** 441,455 ****
      *argc = copied;
    }
  
-   di->Xdp = XOpenDisplay(di->Xdisplay);
-   if (di->Xdp == NULL) {
-     x11_terminate(drv);
-     return 0;
-   }
-   di->Xdscreen = XDefaultScreen(di->Xdp);
- 
-   erase_text_screen(di);
- 
    /* should enumerate visuals here and build video modes for each */
    /* test_video_mode(drv, &x11_info); put this in a loop FIXME */
    /* add_video_mode(&x11_info); */
--- 440,445 ----
***************
*** 481,486 ****
--- 471,477 ----
  	 xe->request_code, xe->minor_code);
    XGetErrorText(dp, xe->error_code, buf, 200);
    printf("%s\n", buf);
+   return 0;
  }
  
  #ifdef FPUERR
***************
*** 522,528 ****
    switch (di->Xvi->class) {
    case StaticGray:
    case StaticColor:
- //    colors = (di->Xdepth <= 8) ? di->Xvi->map_entries : 256;
      colors = 1 << di->Xdepth;
      gotrealdac = 0;
      di->fake_lut = 0;
--- 513,518 ----
***************
*** 531,537 ****
  
    case GrayScale:
    case PseudoColor:
!     colors = (di->Xdepth <= 8) ? di->Xvi->map_entries : 256;
      gotrealdac = 1;
      di->fake_lut = 0;
      istruecolor = 0;
--- 521,527 ----
  
    case GrayScale:
    case PseudoColor:
!     colors = 1 << di->Xdepth;
      gotrealdac = 1;
      di->fake_lut = 0;
      istruecolor = 0;
***************
*** 592,599 ****
  static void
  clearXwindow(DriverX11 *di)
  {
!   char *ptr;
!   int i, len;
    if (di->fake_lut) {
      int j;
      for (j = 0; j < di->Ximage->height; j++)
--- 582,588 ----
  static void
  clearXwindow(DriverX11 *di)
  {
!   int i;
    if (di->fake_lut) {
      int j;
      for (j = 0; j < di->Ximage->height; j++)
***************
*** 630,639 ****
    XFillRectangle(di->Xdp, di->Xw, di->Xgc,
  		 0, 0, di->Xwinwidth, di->Xwinheight);
    x11_flush(&di->pub);
- /* missing the folowing two lines - check if needed - FIXME JCO */
- //  xsync();
- //  drawing_or_drawn = 0;
- 
  }
  
  /*----------------------------------------------------------------------
--- 619,624 ----
***************
*** 660,666 ****
    Window junkw;
    unsigned int width, height;
    int Xmwidth, Xpad;
-   Status status;
  
    XGetGeometry(di->Xdp, di->Xw, &junkw, &junki, &junki, &width, &height,
  	       &junkui, &junkui);
--- 645,650 ----
***************
*** 684,693 ****
      else if (di->Xdepth<=16) {
         Xmwidth = 2*sxdots;
         Xpad = 16;
!     } else if (di->Xdepth<=24) {
!        Xmwidth = 4*sxdots;
!        Xpad = 32;
!     } else {
         Xmwidth = 4*sxdots;
         Xpad = 32;
      }
--- 668,674 ----
      else if (di->Xdepth<=16) {
         Xmwidth = 2*sxdots;
         Xpad = 16;
!     } else {  /* 24 or 32 bpp */
         Xmwidth = 4*sxdots;
         Xpad = 32;
      }
***************
*** 701,707 ****
      di->Ximage = XCreateImage(di->Xdp, di->Xvi, di->Xdepth, ZPixmap, 0, NULL, sxdots,
  			  sydots, Xpad, Xmwidth);
      if (di->Ximage == NULL) {
!       printf("XCreateImage failed\n");
        x11_terminate(drv);
        exit(-1);
      }
--- 682,688 ----
      di->Ximage = XCreateImage(di->Xdp, di->Xvi, di->Xdepth, ZPixmap, 0, NULL, sxdots,
  			  sydots, Xpad, Xmwidth);
      if (di->Ximage == NULL) {
!       fprintf(stderr,"XCreateImage failed\n");
        x11_terminate(drv);
        exit(-1);
      }
***************
*** 839,847 ****
   *----------------------------------------------------------------------
   */
  static int
! xcmapstuff(DriverX11 *di)
  {
!   int ncells, i;
  
    if (di->onroot) {
      di->privatecolor = 0;
--- 820,829 ----
   *----------------------------------------------------------------------
   */
  static int
! xcmapstuff(Driver *drv)
  {
!   DIX11(drv);
!   int ncells, i, powr;
  
    if (di->onroot) {
      di->privatecolor = 0;
***************
*** 853,873 ****
    if (!gotrealdac) {
      di->Xcmap = DefaultColormapOfScreen(di->Xsc);
      if (di->fake_lut)
!       x11_write_palette(&di->pub);
    } else if (di->sharecolor) {
      gotrealdac = 0;
    } else if (di->privatecolor) {
      di->Xcmap = XCreateColormap(di->Xdp, di->Xw, di->Xvi, AllocAll);
      XSetWindowColormap(di->Xdp, di->Xw, di->Xcmap);
    } else {
-     int powr;
- 
      di->Xcmap = DefaultColormap(di->Xdp, di->Xdscreen);
      for (powr = di->Xdepth; powr >= 1; powr--) {
        ncells = 1 << powr;
        if (ncells > colors)
  	continue;
!       if (XAllocColorCells(di->Xdp, di->Xcmap, False, NULL, 0, di->pixtab, 
  			   (unsigned int) ncells)) {
  	colors = ncells;
  	di->usepixtab = 1;
--- 835,853 ----
    if (!gotrealdac) {
      di->Xcmap = DefaultColormapOfScreen(di->Xsc);
      if (di->fake_lut)
!       x11_write_palette(drv);
    } else if (di->sharecolor) {
      gotrealdac = 0;
    } else if (di->privatecolor) {
      di->Xcmap = XCreateColormap(di->Xdp, di->Xw, di->Xvi, AllocAll);
      XSetWindowColormap(di->Xdp, di->Xw, di->Xcmap);
    } else {
      di->Xcmap = DefaultColormap(di->Xdp, di->Xdscreen);
      for (powr = di->Xdepth; powr >= 1; powr--) {
        ncells = 1 << powr;
        if (ncells > colors)
  	continue;
!       if (XAllocColorCells(di->Xdp, di->Xcmap, False, NULL, 0, di->pixtab,
  			   (unsigned int) ncells)) {
  	colors = ncells;
  	di->usepixtab = 1;
***************
*** 1103,1109 ****
  #else
    width = lastx-x+1;
    for (i=0;i < width;i++) {
!     x11_write_pixel(x+i, y, pixels[i]);
    }
  #endif
  }
--- 1083,1089 ----
  #else
    width = lastx-x+1;
    for (i=0;i < width;i++) {
!     x11_write_pixel(drv,x+i, y, pixels[i]);
    }
  #endif
  }
***************
*** 1507,1513 ****
    int charcount;
    char buffer[1];
    KeySym keysym;
-   int compose;
    charcount = XLookupString(xevent, buffer, 1, &keysym, NULL);
    switch (keysym) {
    case XK_Control_L:
--- 1487,1492 ----
***************
*** 1618,1623 ****
--- 1597,1603 ----
        goodbye();
      }
    }
+   return 0;
  }
  
  /* ev_key_release
***************
*** 1687,1692 ****
--- 1667,1675 ----
  x11_redraw(Driver *drv)
  {
    DIX11(drv);
+   unsigned long event_mask = KeyPressMask | KeyReleaseMask | ExposureMask
+                                                  | ButtonPressMask | ButtonReleaseMask
+                                                  | PointerMotionMask | ResizeRedirectMask;
    if (di->alarmon) {
      XPutImage(di->Xdp, di->Xw, di->Xgc, di->Ximage, 0, 0, 0, 0,
  	      sxdots, sydots);
***************
*** 1696,1701 ****
--- 1679,1685 ----
      di->alarmon = 0;
    }
    di->doredraw = 0;
+   XSelectInput(di->Xdp, di->Xw, event_mask);
  }
  
  static void
***************
*** 1718,1724 ****
      switch (xevent->type) {
      case MotionNotify:
        while (XCheckWindowEvent(di->Xdp, di->Xw, PointerMotionMask, xevent))
! 	1;
        if (banding)
  	XDrawRectangle(di->Xdp, di->Xw, di->Xgc, MIN(bandx0, bandx1), 
  		       MIN(bandy0, bandy1), ABS(bandx1-bandx0), 
--- 1702,1708 ----
      switch (xevent->type) {
      case MotionNotify:
        while (XCheckWindowEvent(di->Xdp, di->Xw, PointerMotionMask, xevent))
! 	;
        if (banding)
  	XDrawRectangle(di->Xdp, di->Xw, di->Xgc, MIN(bandx0, bandx1), 
  		       MIN(bandy0, bandy1), ABS(bandx1-bandx0), 
***************
*** 1786,1792 ****
  {
    if (editpal_cursor && !inside_help) {
      while (XCheckWindowEvent(di->Xdp, di->Xw, PointerMotionMask, xevent))
!       1;
  	  
      if (xevent->xmotion.state & Button2Mask ||
  	(xevent->xmotion.state & (Button1Mask | Button3Mask))) {
--- 1770,1776 ----
  {
    if (editpal_cursor && !inside_help) {
      while (XCheckWindowEvent(di->Xdp, di->Xw, PointerMotionMask, xevent))
!       ;
  	  
      if (xevent->xmotion.state & Button2Mask ||
  	(xevent->xmotion.state & (Button1Mask | Button3Mask))) {
***************
*** 1825,1831 ****
   *
   *----------------------------------------------------------------------
   */
! static int
  handle_events(DriverX11 *di)
  {
    XEvent xevent;
--- 1809,1815 ----
   *
   *----------------------------------------------------------------------
   */
! static void
  handle_events(DriverX11 *di)
  {
    XEvent xevent;
***************
*** 1885,1891 ****
  static int
  input_pending(DriverX11 *di)
  {
!   return XPending(di->Xdp);
  #if 0
    struct timeval now;
    fd_set read_fds;
--- 1869,1875 ----
  static int
  input_pending(DriverX11 *di)
  {
!   return XEventsQueued(di->Xdp,QueuedAlready);
  #if 0
    struct timeval now;
    fd_set read_fds;
***************
*** 2106,2122 ****
    XSetWindowAttributes Xwatt;
    XGCValues Xgcvals;
    int Xwinx = 0, Xwiny = 0;
-   int i;
    DIX11(drv);
  
    adapter = 0;
  
!   /* We have to do some X stuff even for disk video, to parse the geometry
!    * string */
  
!   if (di->Xgeometry && !di->onroot)
      XGeometry(di->Xdp, di->Xdscreen, di->Xgeometry, DEFXY, 0, 1, 1, 0, 0,
  	      &Xwinx, &Xwiny, &di->Xwinwidth, &di->Xwinheight);
    if (di->sync)
      XSynchronize(di->Xdp, True);
    XSetErrorHandler(errhand);
--- 2090,2122 ----
    XSetWindowAttributes Xwatt;
    XGCValues Xgcvals;
    int Xwinx = 0, Xwiny = 0;
    DIX11(drv);
  
+   if (di->Xdp != NULL) {
+     /* We are already initialized */
+     return;
+   }
+ 
    adapter = 0;
  
!   di->Xdp = XOpenDisplay(di->Xdisplay);
!   if (di->Xdp == NULL) {
!     x11_terminate(drv);
!     return;
!   }
!   di->Xdscreen = XDefaultScreen(di->Xdp);
! 
!   erase_text_screen(di);
! 
!   /* We have to do some X stuff to parse the geometry string */
  
!   if (di->Xgeometry && !di->onroot) {
!      int offx, offy;
!     XParseGeometry(di->Xgeometry, &offx, &offy,
!            &di->Xwinwidth, &di->Xwinheight);
      XGeometry(di->Xdp, di->Xdscreen, di->Xgeometry, DEFXY, 0, 1, 1, 0, 0,
  	      &Xwinx, &Xwiny, &di->Xwinwidth, &di->Xwinheight);
+   }
    if (di->sync)
      XSynchronize(di->Xdp, True);
    XSetErrorHandler(errhand);
***************
*** 2158,2164 ****
      XStoreName(di->Xdp, di->Xw, "xfractint");
      di->Xgc = XCreateGC(di->Xdp, di->Xw, 0, &Xgcvals);
    }
!   colors = xcmapstuff(di);
    if (rotate_hi == 255) rotate_hi = colors-1;
  
    {
--- 2158,2164 ----
      XStoreName(di->Xdp, di->Xw, "xfractint");
      di->Xgc = XCreateGC(di->Xdp, di->Xw, 0, &Xgcvals);
    }
!   colors = xcmapstuff(drv);
    if (rotate_hi == 255) rotate_hi = colors-1;
  
    {
***************
*** 2176,2184 ****
      XMapWindow(di->Xdp, di->Xw);
    }
  
    x11_resize(drv);
    x11_flush(drv);
-   x11_write_palette(drv);
  
    vidtbl[0].xdots = sxdots;
    vidtbl[0].ydots = sydots;
--- 2176,2184 ----
      XMapWindow(di->Xdp, di->Xw);
    }
  
+   x11_write_palette(drv);
    x11_resize(drv);
    x11_flush(drv);
  
    vidtbl[0].xdots = sxdots;
    vidtbl[0].ydots = sydots;
***************
*** 2240,2246 ****
        return NULL;
      }
  
!     font_pixmap = XCreatePixmap(di->Xdp, di->Xw, 64, 8, 1);
      assert(font_pixmap);
      values.background = 0;
      values.foreground = 1;
--- 2240,2246 ----
        return NULL;
      }
  
!     font_pixmap = XCreatePixmap(di->Xdp, di->Xw, 64, 8, di->Xdepth);
      assert(font_pixmap);
      values.background = 0;
      values.foreground = 1;
***************
*** 2255,2261 ****
  
        XDrawImageString(di->Xdp, font_pixmap, di->Xgc, 0, 8, str, 8);
        font_image =
! 	XGetImage(di->Xdp, font_pixmap, 0, 0, 64, 8, AllPlanes, XYPixmap);
        assert(font_image);
        for (j = 0; j < 8; j++) {
  	for (k = 0; k < 8; k++) {
--- 2255,2261 ----
  
        XDrawImageString(di->Xdp, font_pixmap, di->Xgc, 0, 8, str, 8);
        font_image =
!           XGetImage(di->Xdp, font_pixmap, 0, 0, 64, 8, AllPlanes, XYPixmap);
        assert(font_image);
        for (j = 0; j < 8; j++) {
  	for (k = 0; k < 8; k++) {
***************
*** 2274,2279 ****
--- 2274,2280 ----
      XFreeGC(di->Xdp, font_gc);
      XFreePixmap(di->Xdp, font_pixmap);
    }
+   return NULL;
  }
  
  /*
***************
*** 2294,2300 ****
  static void
  x11_shell(Driver *drv)
  {
-   DIX11(drv);
    SignalHandler sigint;
    char *shell;
    char *argv[2];
--- 2295,2300 ----
***************
*** 2438,2445 ****
    default:
      printf("Bad mode %d\n", dotmode);
      exit(-1);
!   } 
!   if (dotmode !=0) {
      x11_read_palette(drv);
      andcolor = colors-1;
      boxcount =0;
--- 2438,2445 ----
    default:
      printf("Bad mode %d\n", dotmode);
      exit(-1);
!   }
!   if (dotmode != 0) {
      x11_read_palette(drv);
      andcolor = colors-1;
      boxcount =0;
***************
*** 2540,2549 ****
    fprintf(stderr, "x11_buzzer(%d)\n", kind);
  }
  
! static void
  x11_sound_on(Driver *drv, int freq)
  {
    fprintf(stderr, "x11_sound_on(%d)\n", freq);
  }
  
  static void
--- 2540,2550 ----
    fprintf(stderr, "x11_buzzer(%d)\n", kind);
  }
  
! static int
  x11_sound_on(Driver *drv, int freq)
  {
    fprintf(stderr, "x11_sound_on(%d)\n", freq);
+   return 0;
  }
  
  static void
***************
*** 2597,2610 ****
    -1,					/* xlastcolor */
    GXcopy,				/* xlastfcn */
    NULL,					/* pixbuf */
!   { 0 },				/* cols */
    0,					/* XZoomWaiting */
    FONT,					/* x_font_name */
    NULL,					/* font_info */
    0,					/* xbufkey */
!   NULL,					/* fontPtr */
!   { 0 },				/* text_screen */
!   { 0 },				/* text_attr */
    NULL,					/* font_table */
    False,				/* text_modep */
    0,					/* ctl_mode */
--- 2598,2610 ----
    -1,					/* xlastcolor */
    GXcopy,				/* xlastfcn */
    NULL,					/* pixbuf */
!   { {0}, {0}, {0}, {0} },				/* cols */
    0,					/* XZoomWaiting */
    FONT,					/* x_font_name */
    NULL,					/* font_info */
    0,					/* xbufkey */
!   { {0}, {0} },				/* text_screen */
!   { {0}, {0} },				/* text_attr */
    NULL,					/* font_table */
    False,				/* text_modep */
    0,					/* ctl_mode */
diff -c ../fractals.c ./fractals.c
*** ../fractals.c	2003-02-09 13:57:04.000000000 -0600
--- ./fractals.c	2003-02-09 13:57:01.000000000 -0600
***************
*** 162,168 ****
     return(0);
  }
  #endif
! int near fpMODbailout()
  {
     tempsqrx=sqr(new.x);
     tempsqry=sqr(new.y);
--- 162,168 ----
     return(0);
  }
  #endif
! int near fpMODbailout(void)
  {
     tempsqrx=sqr(new.x);
     tempsqry=sqr(new.y);
***************
*** 1211,1217 ****
      return(floatbailout());
    }
  
!   int
  LambdaTrigfpFractal(void)
  {
     FLOATXYTRIGBAILOUT();
--- 1211,1217 ----
      return(floatbailout());
    }
  
! int
  LambdaTrigfpFractal(void)
  {
     FLOATXYTRIGBAILOUT();
diff -c ../fractint.c ./fractint.c
*** ../fractint.c	2003-02-09 13:57:04.000000000 -0600
--- ./fractint.c	2003-02-09 13:57:01.000000000 -0600
***************
*** 352,358 ****
        driver_unstack_screen();          /* restore the graphics screen */
        stacked = 0;
        overlay3d = 0;                    /* forget overlays */
!       display3d= 0;                   /* forget 3D */
        if (calc_status ==3)
           calc_status = 0;
        resumeflag = 1;
--- 352,358 ----
        driver_unstack_screen();          /* restore the graphics screen */
        stacked = 0;
        overlay3d = 0;                    /* forget overlays */
!       display3d = 0;                    /* forget 3D */
        if (calc_status ==3)
           calc_status = 0;
        resumeflag = 1;
diff -c ../fractint.cfg ./fractint.cfg
*** ../fractint.cfg	2003-02-09 13:57:05.000000000 -0600
--- ./fractint.cfg	2003-02-09 13:57:01.000000000 -0600
***************
*** 1,21 ****
- Allegro driver	,  640,  480,16m,8,8,8,8,                         
- Allegro driver	,  640,  480,256,0,0,0,0,                         
- Allegro driver	,  800,  600,256,0,0,0,0,                         
- Allegro driver	, 1024,  768,256,0,0,0,0,                         
- Allegro driver	, 1600, 1200,256,0,0,0,0,                         
- Allegro driver	,  640,  480,32k,5,5,5,0,                         
- Allegro driver	,  800,  600,32k,5,5,5,0,                         
- Allegro driver	, 1024,  768,32k,5,5,5,0,                         
- Allegro driver	, 1600, 1200,32k,5,5,5,0,                         
- Allegro driver	,  640,  480,64k,5,6,5,0,                         
- Allegro driver	,  800,  600,64k,5,6,5,0,                         
- Allegro driver	, 1024,  768,64k,5,6,5,0,                         
- Allegro driver	, 1600, 1200,64k,5,6,5,0,                         
- Allegro driver	,  640,  480,16m,8,8,8,0,                         
- Allegro driver	,  800,  600,16m,8,8,8,0,                         
- Allegro driver	, 1024,  768,16m,8,8,8,0,                         
- Allegro driver	, 1600, 1200,16m,8,8,8,0,                         
- Allegro driver	,  640,  480,16m,8,8,8,8,                         
- Allegro driver	,  800,  600,16m,8,8,8,8,                         
- Allegro driver	, 1024,  768,16m,8,8,8,8,                         
- Allegro driver	, 1600, 1200,16m,8,8,8,8,                         
--- 0 ----
diff -c ../makedif ./makedif
*** ../makedif	2003-02-09 13:57:06.000000000 -0600
--- ./makedif	2003-11-28 18:47:18.000000000 -0600
***************
*** 1 ****
! diff -c ../f_o_a_05302000 . | gawk '$1 != "Only" && $1 != "Binary" {print $0}' > temp.dif
--- 1 ----
! diff -c ../ . | gawk '$1 != "Only" && $1 != "Binary" {print $0}' > temp.dif
diff -c ../Makefile ./Makefile
*** ../Makefile	2003-02-09 13:57:04.000000000 -0600
--- ./Makefile	2003-02-09 13:57:03.000000000 -0600
***************
*** 73,79 ****
  # For Solaris, add -L/usr/openwin/lib
  # For Linux, use  
  #LIBS = -L/usr/X11R6/lib -lX11 -lm -lcurses
! LIBS = -L/usr/X11R6/lib -lX11 -lm -lncurses  `/usr/local/bin/allegro-config --libs`
  #LIBS = -lX11 -lm -lcurses
  
  # For using nasm, set:
--- 73,79 ----
  # For Solaris, add -L/usr/openwin/lib
  # For Linux, use  
  #LIBS = -L/usr/X11R6/lib -lX11 -lm -lcurses
! LIBS = -L/usr/X11R6/lib -lX11 -lm -lncurses  `/usr/bin/allegro-config --libs`
  #LIBS = -lX11 -lm -lcurses
  
  # For using nasm, set:
diff -c ../sstools.ini ./sstools.ini
*** ../sstools.ini	2003-02-09 13:57:05.000000000 -0600
--- ./sstools.ini	2003-02-09 13:57:03.000000000 -0600
***************
*** 4,7 ****
  passes=1  ; The get pixel routine is broken so solid guessing, etc. don't
            ; work quite right.
  ;textcolors=////27////////////////////////27 ; fix colors for my laptop
! fpu=387
--- 4,7 ----
  passes=1  ; The get pixel routine is broken so solid guessing, etc. don't
            ; work quite right.
  ;textcolors=////27////////////////////////27 ; fix colors for my laptop
! ;fpu=387
